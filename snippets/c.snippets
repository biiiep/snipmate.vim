# main()
snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
snippet mainn
	int main(void)
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define ${1:`toupper(Filename('$1_'))`}
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
snippet once
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}
	#define $1

	${2}

	#endif
# If Condition
snippet if
	if (${1:condition}) {
		${2}
	} ${3}

	${4}
snippet el
	else {
		${1}
	}${2}
# If Condition short
snippet ifs
	if (${1:condition})
		${2}
	${3}
snippet els
	else
		${1}
# Ternary conditional
snippet t
	${1} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2}
	} while (${1});${3}
# While Loop
snippet wh
	while (${1}) {
		${2}
	}${3}
# For Loop
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}${5}
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5}
	}${6}
# Function
snippet fun
	${1:int} `Filename('$1', 'name')`_${2}(${3})
	{
		${4:}
	}

	${5}
snippet sfun
	static ${1:int} `Filename('$1', 'name')`_${2}(${3})
	{
		${4:}
	}

	${5}
# Function Declaration
snippet fund
	${1:int} `Filename('$1', 'name')`_${2:func}(${3});${4}
snippet sfund
	static ${1:int} `Filename('$1', 'name')`_${2:func}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct `Filename('$1', 'name')`_${1} {
		${2}
	}${3};${4}
snippet stl
	struct ${1} {
		${2}
	}${3};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3}
	} ${1:`Filename('$1_t', 'name')`};
# Enum
snippet en
	enum `Filename('$1', 'name')`${1:_type} {
		`Filename('$1', 'name')`$1${2},
	}${3};${4}
# Typdef enum
snippet tde
	typedef enum {
		${1}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet dbg
	dbg("${1:%s}\n"${2});${3}
# This is kind of convenient
snippet .
	[${1}]${2}
snippet s
	char *${1} = "${2}";${3}
snippet cs
	const char *${1} = "${2}";${3}
snippet getopt
	int opt;

	while ((opt = getopt(argc, argv, "{1:opts}")) != -1) {
		switch (opt) {
		case 'opts':${3}
			break;
		default:
			break;
		}
	}

